/**
 *
 * @author yutent<yutent.io@gmail.com>
 * @date 2020/10/29 16:48:26
 */

import { KEY_DICT, MULTI_KEYS } from './key.dict.js'

var log = console.log

function bind(fn) {
  document.addEventListener('keydown', fn, false)
  return fn
}

function unbind(fn) {
  document.removeEventListener('keydown', fn, false)
}

export default class Keyboard {
  constructor() {
    this.__EVENTS__ = {}
    this._keydown = bind(ev => {
      for (let k in this.__EVENTS__) {
        var item = this.__EVENTS__[k]
        if (item.check(ev)) {
          item.fn.forEach(function(fn) {
            fn(ev)
          })
          break
        }
      }
    })
  }

  destroy() {
    delete this.__EVENTS__
    unbind(this._keydown)
  }

  on(act, callback) {
    var key = []
    var dict = []

    act.forEach(it => {
      var tmp = {}
      dict.push(tmp)
      it = it.split('+').map(k => {
        k = k.trim().toLowerCase()
        tmp[k] = KEY_DICT[k]
        return k
      })
      key.push(it.join('+'))
    })

    key = key.join(',')

    if (this.__EVENTS__[key]) {
      this.__EVENTS__[key].fn.push(callback)
    } else {
      this.__EVENTS__[key] = {
        dict,
        check(ev) {
          var { keyCode, code } = ev
          var now = 0
          var actions = this.dict.concat()
          var action = actions.shift()
          var checked = false

          log('check: ', keyCode, code, ev)

          while (action) {
            if (now === 0) {
            } else {
              var _now = Date.now()
              if (_now - now > 100) {
                checked = false
                break
              }
              now = _now
            }
            action = actions.shift()
          }

          return checked
        },
        fn: [callback]
      }
    }
    log(this.__EVENTS__)
  }
}
