/**
 *
 * @author yutent<yutent.io@gmail.com>
 * @date 2020/10/29 16:48:26
 */

import { KEY_DICT, MULTI_KEYS, MULTI_KEY_CODES } from './key.dict.js'

function bind(el, fn) {
  ;(el || document).addEventListener('keydown', fn, false)
  return fn
}

function unbind(el, fn) {
  ;(el || document).removeEventListener('keydown', fn, false)
}

function hide(target, name, value) {
  Object.defineProperty(target, name, {
    value,
    writable: true,
    enumerable: false,
    configurable: true
  })
}

// 按键检测
function check(ev) {
  var checked = false

  if (typeof this.keys.key === 'object') {
    checked = this.keys.key.includes(ev.keyCode)
  } else {
    checked = ev.keyCode === this.keys.key
  }

  if (checked) {
    for (let k of this.keys) {
      checked = ev[`${k}Key`]
    }
  }

  return checked
}

export default class Keyboard {
  constructor(elem) {
    console.log(elem)
    this.$elem = elem
    hide(this, '__EVENTS__', {})

    hide(
      this,
      '_keydown',
      bind(elem, ev => {
        if (MULTI_KEY_CODES.includes(ev.keyCode)) {
          return
        }

        for (let k in this.__EVENTS__) {
          var item = this.__EVENTS__[k]
          var res = item.check(ev)
          var now = Date.now()
          var end = false // 是否结束检测

          // 假设之前有激活过, 优先再检测子组合
          if (item.actived === true) {
            // 如果超时(300毫秒)了, 则不再管子组合了
            if (now - item.last > 300) {
              delete item.actived
            } else {
              for (let next of item.next) {
                let tmp = next.check(ev)
                if (tmp) {
                  end = true
                  // 第2组一定有回调,无需判断
                  next.fn.forEach(function(fn) {
                    fn(ev)
                  })
                  break
                }
              }
            }
          }

          // 第一组, 只要检测通过了, 就触发回调
          if (res) {
            end = true
            if (item.next) {
              item.actived = true
              item.last = now
            }
            // 有回调就触发
            if (item.fn) {
              item.fn.forEach(function(fn) {
                fn(ev)
              })
            }
          }

          // 命中了, 后面的就不再检测了
          if (end) {
            break
          }
        }
      })
    )
  }

  destroy() {
    unbind(this.$elem, this._keydown)
    delete this.__EVENTS__
    delete this._keydown
  }

  __parse_action__(act) {
    var keys = []
    var dict = []
    var passed = true // 语法检测通过

    act.forEach(it => {
      var tmp = []
      dict.push(tmp)
      it = it.split('+').map(k => {
        k = k.trim().toLowerCase()
        if (MULTI_KEYS[k]) {
          if (tmp.includes(k)) {
            passed = false
            console.error('功能键,同组中不能重复。⎣%s⎤', it)
          } else {
            tmp.push(k)
          }
        } else {
          if (tmp.key) {
            passed = false
            console.error('非功能键,同组不能出现多个。⎣%s⎤', it)
          } else {
            tmp.key = KEY_DICT[k]
          }
        }
        return k
      })
      keys.push(it.join('+'))
    })

    return { keys, dict, passed }
  }

  off(act, callback) {
    if (act.length < 1 || typeof callback !== 'function') {
      return console.error('无效热键或回调')
    }

    let { keys, dict, passed } = this.__parse_action__(act)

    if (passed) {
      let k1 = keys[0]

      if (keys.length === 1) {
        if (this.__EVENTS__[k1] && this.__EVENTS__[k1].fn) {
          let i = 0
          for (let fn of this.__EVENTS__[k1].fn) {
            if (fn === callback) {
              this.__EVENTS__[k1].fn.splice(i, 1)
              // 只剩1个, 删除fn字段
              if (this.__EVENTS__[k1].fn.length < 1) {
                delete this.__EVENTS__[k1].fn

                // 删完fn字段, 如果没有next字段的话, 整个热键删除
                if (!this.__EVENTS__[k1].next) {
                  delete this.__EVENTS__[k1]
                }
              }
              break
            }
            i++
          }
        }
      } else {
        if (this.__EVENTS__[k1] && this.__EVENTS__[k1].next) {
          let k2 = keys[1]
          let i = 0
          let sub

          for (sub of this.__EVENTS__[k1].next) {
            if (sub.id === k2) {
              break
            }
            i++
          }

          if (sub.fn) {
            let j = 0
            for (let fn of sub.fn) {
              if (fn === callback) {
                sub.fn.splice(j, 1)
                // 如果该组的事件为空了, 则删除该组合
                if (sub.fn.length < 1) {
                  this.__EVENTS__[k1].next.splice(i, 1)

                  // 第2组, 如果回调队列为空了, 直接删除整个第2组
                  if (this.__EVENTS__[k1].next.length < 1) {
                    delete this.__EVENTS__[k1].next

                    // 如果此时, 上一层没的回调了, 则整个热键删除
                    if (!this.__EVENTS__[k1].fn) {
                      delete this.__EVENTS__[k1]
                    }
                  }
                }
              }
              j++
            }
          }
        }
      }
    }
  }

  on(act, callback) {
    if (act.length < 1 || typeof callback !== 'function') {
      return console.error('无效热键或回调')
    }

    let { keys, dict, passed } = this.__parse_action__(act)

    if (passed) {
      // 最多支持2组
      let first = keys.shift()
      let second = keys.shift()

      if (!this.__EVENTS__[first]) {
        this.__EVENTS__[first] = {
          id: first,
          keys: dict[0],
          last: 0, //上次触发时间戳
          check
        }
      }

      if (second) {
        if (this.__EVENTS__[first].next) {
          for (let i = -1, it; (it = this.__EVENTS__[first].next[++i]); ) {
            if (it.id === second) {
              it.fn.push(callback)
              return
            }
          }
        }
        this.__EVENTS__[first].next = [
          {
            id: second,
            keys: dict[1],
            check,
            fn: [callback]
          }
        ]
      } else {
        if (this.__EVENTS__[first].fn) {
          this.__EVENTS__[first].fn.push(callback)
        } else {
          this.__EVENTS__[first].fn = [callback]
        }
      }
    }
  }
}
